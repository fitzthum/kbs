// Copyright (c) 2023 Alibaba Cloud
//
// SPDX-License-Identifier: Apache-2.0
//

use anyhow::*;
use ear::RawValue;
use kbs_types::Tee;
use serde::Deserialize;
use serde_json::Value;
use serde_variant::to_variant_name;
use simple::COCO_AS_ISSUER_NAME;
use std::collections::{BTreeMap, HashMap};
use strum::{Display, EnumString};

mod simple;
mod ear_broker;

const DEFAULT_TOKEN_DURATION: i64 = 5;
const DEFAULT_PROFILE: &str = "tag:github.com,2024:confidential-containers/Trustee";
const DEFAULT_DEVELOPER_NAME: &str = "https://confidentialcontainers.org";

pub trait AttestationTokenBroker {
    /// List the rules that the token broker will have expected
    /// the policy engine to evaluate.
    fn rules(&self) -> Vec<String>; 

    /// Issue an signed attestation token with custom claims.
    /// Return base64 encoded Json Web Token.
    fn issue(
        &self,
        policy_results: HashMap<String, regorus::Value>,
        tcb_claims: BTreeMap<String, RawValue>,
        policy_id: String,
        init_data_claims: serde_json::Value,
        runtime_data_claims: serde_json::Value,
        tee: Tee,
    ) -> Result<String>;
}

#[derive(Deserialize, Debug, Clone, EnumString, Display)]
pub enum AttestationTokenBrokerType {
    Simple,
    Ear,
}

impl AttestationTokenBrokerType {
    pub fn to_token_broker(
        &self,
        config: AttestationTokenConfig,
    ) -> Result<Box<dyn AttestationTokenBroker + Send + Sync>> {
        match self {
            AttestationTokenBrokerType::Simple => {
                Ok(Box::new(simple::SimpleAttestationTokenBroker::new(config)?)
                    as Box<dyn AttestationTokenBroker + Send + Sync>)
            }
            AttestationTokenBrokerType::Ear => {
                Ok(Box::new(ear_broker::EarAttestationTokenBroker::new(config)?)
                    as Box<dyn AttestationTokenBroker + Send + Sync>)
            }

        }
    }
}

/// Configuration for the Attestation Token generated by the Attestation Service
#[derive(Deserialize, Debug, Clone)]
pub struct AttestationTokenConfig {
    /// The Attestation Results Token duration time (in minutes)
    /// Default: 5 minutes
    #[serde(default = "default_duration")]
    pub duration_min: i64,

	/// For simple/coco tokens, the issuer of the token
    #[serde(default = "default_issuer_name")]
    pub issuer_name: String,

    /// The developer name to be used as part of the Verifier ID
    /// in the EAR.
    /// Default: `https://confidentialcontainers.org`
    #[serde(default = "default_developer")]
    pub developer_name: String,

    /// The build name to be used as part of the Verifier ID
    /// in the EAR.
    /// The default value will be generated from the Cargo package
    /// name and version of the AS.
    #[serde(default = "default_build")]
    pub build_name: String,

    /// The Profile that describes the EAR token
    /// Default: `tag:github.com,2024:confidential-containers/Trustee`
    #[serde(default = "default_profile")]
    pub profile_name: String,

    /// Configuration for signing the EAR
    /// If this is not specified, the EAR
    /// will be signed with an ephemeral private key.
    pub signer: Option<TokenSignerConfig>,
}


fn default_issuer_name() -> String {
    COCO_AS_ISSUER_NAME.to_string()
}

fn default_duration() -> i64 {
    DEFAULT_TOKEN_DURATION
}

fn default_developer() -> String {
    DEFAULT_DEVELOPER_NAME.to_string()
}

fn default_profile() -> String {
    DEFAULT_PROFILE.to_string()
}

fn default_build() -> String {
    format!("{} {}", env!("CARGO_PKG_NAME"), env!("CARGO_PKG_VERSION"))
}

#[derive(Deserialize, Debug, Clone)]
pub struct TokenSignerConfig {
    pub key_path: String,
    pub cert_url: Option<String>,

    // PEM format certificate chain.
    pub cert_path: Option<String>,
}

impl Default for AttestationTokenConfig {
    fn default() -> Self {
        Self {
            duration_min: default_duration(),
            issuer_name: COCO_AS_ISSUER_NAME.to_string(),
            developer_name: default_developer(),
            build_name: default_build(),
            profile_name: default_profile(),
            signer: None,
        }
    }
}
